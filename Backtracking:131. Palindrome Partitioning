/* 131. Palindrome Partitioning
   Link: https://leetcode.com/problems/palindrome-partitioning/description/
*/
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>>res;
        vector<string>v;
        helper(s,0,v,res,-1);
        return res;
    }
    bool palindrome(string &s, int i , int j){
        while(i<=j&&s[i]==s[j]) i++,j--;
        return i>j;
    }
    
    void helper(string &s, int i, vector<string>&v,vector<vector<string>>&res , int prev){
        if(i==s.size()){
            if(prev==i-1) res.push_back(v); 
            return ;
        }

        if(palindrome(s,prev+1,i)){
            v.push_back(s.substr(prev+1,i-prev));
            helper(s,i+1,v,res,i);
            v.pop_back();
        }
        helper(s,i+1,v,res,prev);
    }
};
